configs:
  credentialTemplates:
    github-jonas-home:
      url: https://github.com/jonaskop-home
      username: "{{ .githubUsername }}"
      password: "{{ .githubPassword }}"
  secret:
    extra:
      oidc.google.clientId: "{{ .argocdClientId }}"
      oidc.google.clientSecret: "{{ .argocdClientSecret }}"
  cm:
    timeout.reconciliation: 10s
    # dex.config: |
    #   connectors:
    #   - config:
    #       issuer: https://accounts.google.com
    #       clientID: $oidc.google.clientId
    #       clientSecret: $oidc.google.clientSecret
    #     type: oidc
    #     id: google
    #     name: Google
    oidc.config: |
      name: Google
      issuer: https://accounts.google.com
      clientID: $oidc.google.clientId
      clientSecret: $oidc.google.clientSecret

    #   # Optional list of allowed aud claims. If omitted or empty, defaults to the clientID value above (and the
    #   # cliClientID, if that is also specified). If you specify a list and want the clientID to be allowed, you must
    #   # explicitly include it in the list.
    #   # Token verification will pass if any of the token's audiences matches any of the audiences in this list.
    #   # allowedAudiences:
    #   # - aaaabbbbccccddddeee
    #   # - qqqqwwwweeeerrrrttt

    #   # Optional. If false, tokens without an audience will always fail validation. If true, tokens without an audience
    #   # will always pass validation.
    #   # Defaults to true for Argo CD < 2.6.0. Defaults to false for Argo CD >= 2.6.0.
    #   # skipAudienceCheckWhenTokenHasNoAudience: true

    #   # Optional set of OIDC scopes to request. If omitted, defaults to: ["openid", "profile", "email", "groups"]
    #   # requestedScopes: ["openid", "profile", "email", "groups"]

    #   # Optional set of OIDC claims to request on the ID token.
    #   # requestedIDTokenClaims: {"groups": {"essential": true}}

    #   # Some OIDC providers require a separate clientID for different callback URLs.
    #   # For example, if configuring Argo CD with self-hosted Dex, you will need a separate client ID
    #   # for the 'localhost' (CLI) client to Dex. This field is optional. If omitted, the CLI will
    #   # use the same clientID as the Argo CD server
    #   # cliClientID: vvvvwwwwxxxxyyyyzzzz

server:
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    enabled: true
    hosts:
      - "argocd.sjoedin.se"
    tls:
      - hosts:
          - "argocd.sjoedin.se"
        secretName: argo-tls

repoServer:
  env:
    - name: STORE_KIND
      value: ClusterSecretStore
    - name: STORE_NAME
      value: gcp-store
    - name: REFRESH_INTERVAL
      value: "0"
  # extraArgs: ["--loglevel", "debug"]
  initContainers:
    - name: helm-wrapper
      image: alpine:3.18.3
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - |
          # Download external-secrets-transformer
          wget https://github.com/jonaskop-home/external-secrets-transformer/releases/download/0.1.0/external-secrets-transformer-amd64
          install -m 0755 external-secrets-transformer-amd64 /custom-tools/external-secrets-transformer

          # Create wrapper script for helm
          cat <<'EOF' > /custom-tools/helm
          #!/bin/bash
          exec /usr/local/bin/helm-real "$@" $([ "$1" == "template" ] && echo "--post-renderer external-secrets-transformer")
          EOF
          chmod 0755 /custom-tools/helm

          # Download real helm
          wget https://get.helm.sh/helm-v3.12.1-linux-amd64.tar.gz
          tar -xvf helm-v3.12.1-linux-amd64.tar.gz
          mv linux-amd64/helm /custom-tools/helm-real

          # Create wrapper script for helm
          cat <<'EOF' > /custom-tools/kustomize
          #!/bin/bash
          exec /usr/local/bin/kustomize-real "$@" | $([ "$1" == "build" ] && echo "external-secrets-transformer")
          EOF
          chmod 0755 /custom-tools/kustomize

          # Download real kustomize
          wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.1.0/kustomize_v5.1.0_linux_amd64.tar.gz
          tar -xvf kustomize_v5.1.0_linux_amd64.tar.gz
          mv kustomize /custom-tools/kustomize-real

      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
  volumes:
    - name: custom-tools
      emptyDir: {}
  volumeMounts:
    - mountPath: /usr/local/bin/external-secrets-transformer
      subPath: external-secrets-transformer
      name: custom-tools
    - mountPath: /usr/local/bin/helm-real
      subPath: helm-real
      name: custom-tools
    - mountPath: /usr/local/bin/helm
      subPath: helm
      name: custom-tools
    - mountPath: /usr/local/bin/kustomize-real
      subPath: kustomize-real
      name: custom-tools
    - mountPath: /usr/local/bin/kustomize
      subPath: kustomize
      name: custom-tools
